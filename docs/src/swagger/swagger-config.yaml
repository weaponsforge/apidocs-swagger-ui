openapi: 3.0.3
info:
  title: Todo CRUD API Documentation
  description: |-
    Demonstrates Swagger UI with Webpack including CSS on a regular **Todo** Create, Update, Delete, Get (CRUD) REST API
  termsOfService: http://localhost:3001/terms
  contact:
    email: abc@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about Todo
  url: https://github.com/weaponsforge/apidocs-swagger-ui
servers:
  - url: http://localhost:3001/api
tags:
  - name: todo
    description: Everything about a Todo item
    externalDocs:
      description: Find out more
      url: https://github.com/weaponsforge/apidocs-swagger-ui
paths:
  /todo:
    post:
      tags:
        - todo
      summary: Store a new Todo to the database
      description: Create and store a new Todo object
      operationId: createTodo
      requestBody:
        description: Create a new Todo in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
        '405':
          description: Validation exception
    patch:
      tags:
        - todo
      summary: Updates an existing Todo by ID
      description: Update an existing Todo by ID
      operationId: updateTodo
      requestBody:
        description: Update an existing Todo in the database. The `_id` field is required while the `title`, `description` and `content` fields are optional.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
        '405':
          description: Validation exception
  /todo/{id}:
    delete:
      tags:
        - todo
      summary: Deletes a Todo
      descriptionn: Delete a Todo
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          description: Todo ID to delete
          required: true
          schema:
            type: string
            format: alphanumeric
      responses:
        '200':
          description: Successful delete operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid todo ID
    get:
      tags:
        - todo
      summary: Find a Todo by ID
      description: Returns a single todo
      operationId: getTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: string
            format: alphanumeric
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
  /todos:
    get:
      tags:
        - todo
      summary: Find all Todo items
      description: Returns all todo items stored in the database
      operationId: getTodos
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
components:
  schemas:
    Todo:
      type: object
      properties:
        _id:
          type: string
          format: alphanumeric
          example: ggdasu34773647f
        title:
          type: string
          example: My Favorite Things
        description:
          type: string
          example: Things that I like
        content:
          type: string
          example: The things I love in this world is Brownie and you.
  requestBodies:
    Todo:
      description: Todo object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Todo'
